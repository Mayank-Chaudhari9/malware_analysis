import pandas
from pandas.tools.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import GaussianNB

from numba import cuda
import pickle


import time


@cuda.jit
def parallel_predict(model,test_data,result):
    result=model.predict(test_data)
    return result


# Load dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pandas.read_csv(url, names=names)

# shape
print(dataset.shape)

# head
#print(dataset.head(100))

# descriptions
#print(dataset.describe())

# class distribution
#print(dataset.groupby('class').size())

# box and whisker plots
#dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
#plt.show()

# histograms
#dataset.hist()
#plt.show()


# scatter plot matrix
#scatter_matrix(dataset)
#plt.show()


# Split-out validation dataset
array = dataset.values
X = array[:,0:4]
Y = array[:,4]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

#model type
model =  GaussianNB()

#print (type(model))
#print (model)

# Training the model
#train_t=time.time()
model.fit(X_train, Y_train)

filename = 'train_model.sav'
pickle.dump(model, open(filename,'wb'))


# predict output
#test_s = time.time()
#predicted = model.predict(X_validation)
#test_e = time.time()

#print (predicted)
#print ("accuracy" ,(accuracy_score(Y_validation, predicted)))
#print(confusion_matrix(Y_validation, predicted))
#print(classification_report(Y_validation, predicted))

#print("training time %f" %(test_s-train_t))

#print("testing time %f" %(test_e-test_s))

#print("total_time %f" %(test_e-train_t))

#result = []
#tpb = (16,16)
#bpg=(X_validation.size + (tpb -1)) // tpb
#parallel_predict[bpg,tpb](model, X_validation, result)
