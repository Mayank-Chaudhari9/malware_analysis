from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json
import numpy

## ************** check for the rendomness *************
## check model variation using "Keras Function API"
#### random seed model
def train(infile):
    numpy.random.seed(7)

    #dataset = numpy.loadtxt("pima-indians-diabetes.csv", delimiter=",")
    dataset = numpy.loadtxt(infile+".csv", delimiter=",")

    #split data-set

    X = dataset[:,0:8]
    Y = dataset[:,8]

    #print X
    #print Y

    ## MOdel definitin

    model = Sequential()
    model.add(Dense(12,input_dim=8, activation ='relu'))
    model.add(Dense(8,activation='relu'))
    model.add(Dense(1,activation='sigmoid'))

    # Compile model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Fit the model
    model.fit(X, Y, epochs=1000, batch_size=10)

    # calculate predictions
    predictions = model.predict(X)

    # evaluate the model
    scores = model.evaluate(X, Y)
    print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))


    ###########--------------------------------#################
    # for dumping a model there are two steps
    # 1 -> serialoze /dump model to json/yml file
    # 2 -> serialize /dump weights to json file

    ## 1-> serailizing model to jason file
    model_json = model.to_json()
    with open("model.json","w") as json_file:
        json_file.write(model_json)

    ## 1-> serializing weights
    model.save_weights("model.h5")
    print("Saved model to disk")



    # calculate predictions
    #predictions = model.predict(X)
    # round predictions
    #rounded = [round(x[0]) for x in predictions]
    #print(rounded)


def main():
    f="pima-indians-diabetes"
    train (f)

if __name__ == "__main__":
    for i in range (1,10):
        main()
