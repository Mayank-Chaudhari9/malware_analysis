import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout, Activation
from keras.models import model_from_json
from keras.models import load_model
import numpy
import time


## ************** Function for training and dumping the model  *************
def train(infile):
    numpy.random.seed(7)

    #dataset = numpy.loadtxt("../pima-indians-diabetes.csv", delimiter=",")
    dataset = numpy.loadtxt(infile+".csv", delimiter=",")

    #split data-set

    #X = dataset[:,0]
    #Y = dataset[:,1:9]
    #class label
    X = dataset[:,0]
    #fefature vectors
    Y = dataset[:,1:1809]


    #print X
    #print Y

    ## MOdel definitin

    model = Sequential()
    # using gaussian initializer to avoid multiplicative impact of weight aggregation
    # others can also be tried
    #act = keras.layers.advanced_activations.PReLU(init='normal', weights=None)
    #model.add(Dense(1,input_dim=1808, init ='uniform', activation ='sigmoid'))
    model.add(Dense(1808,input_dim=1808, init ='uniform'))
    model.add(keras.layers.advanced_activations.PReLU())
    model.add(Dropout(0.5))
    #model.add(Dense(1808,init ='uniform'))
    #model.add(keras.layers.advanced_activations.PReLU())
    #model.add(Dropout(0.3))
    model.add(Dense(1,activation='sigmoid'))

    # Compile model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Fit the model
    start_train= time.time()
    model.fit(Y, X, epochs=150)
    end_train=time.time()
    print "time elapsed in training   ",(end_train-start_train)
    #calculating time elapsed in predictions
    start = time.time()

    # calculate predictions
    predictions = model.predict(Y)

    end =time.time()
    print "time elapsed in prediction   ",(end-start)

    # evaluate the model
    scores = model.evaluate(Y, X)
    print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))


    rounded = [round(x[0]) for x in predictions]
    #print(rounded)
    ###########--------------------------------#################
    # for dumping a model there are two steps
    # 1 -> serialoze /dump model to json/yml file
    # 2 -> serialize /dump weights to json file

    ## 1-> serailizing model to jason filea
    model_json = model.to_json()
    with open("model3d50G80epc.json","w") as json_file:
        json_file.write(model_json)

    ## 1-> serializing weights
    model.save_weights("model3d50G80epc.h5")
    print("Saved model to disk")



def main():
    f="/home/mayank/Desktop/data/testing/neural/train_wo_size"
    train (f)

if __name__ == "__main__":
    main()
