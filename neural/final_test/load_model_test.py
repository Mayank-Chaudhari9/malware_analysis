from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json

import numpy
import time

## run with following command to use only GPU0 for cup only use-1
#CUDA_VISIBLE_DEVICES=0 python test.py

dataset = numpy.loadtxt("/home/mayank/Desktop/data/testing/neural/train_wo_size.csv", delimiter=",")

#split data-set

#class label
X = dataset[:,0]
#fefature vectors
Y = dataset[:,1:1809]



dataset1 = numpy.loadtxt("/home/mayank/Desktop/data/testing/neural/test_wo_size.csv", delimiter=",")

#split data-set

X1 = dataset1[:,0]
Y11 = dataset1[:,100:1809]
Y1 =dataset1[:,1:1809]
print "no of predicions to be made ",len(Y1)
# load json and create model
json_file = open('model3d50G80epc.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("model3d50G80epc.h5")
print("Loaded model from disk")

# evaluate loaded model on test data
loaded_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
score = loaded_model.evaluate(Y, X, verbose=0)
print("%s: %.2f%%" % (loaded_model.metrics_names[1], score[1]*100))


#calculating time spent in prediction
start = time.time()

# calculate predictions
predictions = loaded_model.predict(Y1)

end = time.time()
test_time=(end-start)
print "time elapsed in predictions  ", test_time

# round predictions
rounded = [round(x[0]) for x in predictions]
#print(rounded)
#print(Y1)

## creating confusion matrix
tests = len(rounded)
fp =0
tp =0
fn =0
tn =0
#print (tests)
for i in range(tests):
    if((X1[i] == 0) and (int(rounded[i])==0)):
        tn=tn+1
    if((X1[i] == 1) and (int(rounded[i])== 1)):
        tp=tp+1
    if((X1[i] == 0) and (int(rounded[i])==1)):
        fp=fp+1
    if((X1[i] == 1) and (int(rounded[i])== 0)):
        fn=fn+1


print (" confusion matrix for givem test data is : ")
print ("tp  ","tn   " ,"fp  ","fn")
print (tp,"  ",tn,"   ",fp,"   ",fn)



# prediction accuracy
prediction_accuracy =float((tp+tn))/float((tp+tn+fp+fn))
print("prediction_accuracy is: ", prediction_accuracy*100,"%")

# true positive rate
true_positive =float((tp))/float((tp+fn))
print("true_positive rate is: ", true_positive*100,"%")

# true negative rate
true_negative =float((tn))/float((tn+fp))
print("true_negative rate is: ", true_negative*100,"%")

# false positive rate
false_positive =float((fp))/float((tn+fp))
print("false_positive rate is: ", false_positive*100,"%")

# false negative rate
false_negative =float((fn))/float((tp+fn))
print("false_negative rate is: ", false_negative*100,"%")

f= "score3Ld50epc150p.txt"
#fd1=open("accuracy_comp",'a+')
#fd2=open("computation_comp_s",'a+')
fd=open(f,'a+')
msg =str(len(Y1))+" "+str(prediction_accuracy*100)+" "+str(true_positive*100)+" "+str(true_negative*100)+" "+str(false_positive*100)+" "+str(false_negative*100)+" "+str(test_time)+"\r\n"
#msg1 =str(len(Y1))+" "+str(prediction_accuracy)+"\r\n"
#msg2 =str(len(Y1))+" "+str(test_time*1000)+"\r\n"
fd.write(msg)
#fd1.write(msg1)
#fd2.write(msg2)
