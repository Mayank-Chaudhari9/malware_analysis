from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json
import numpy

dataset = numpy.loadtxt("pima-indians-diabetes.csv", delimiter=",")

#split data-set

X = dataset[:,0:8]
Y = dataset[:,8]


dataset1 = numpy.loadtxt("test_set.csv", delimiter=",")

#split data-set

X1 = dataset1[:,0:8]
Y1 = dataset1[:,8]



# load json and create model
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("model.h5")
print("Loaded model from disk")

# evaluate loaded model on test data
loaded_model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
score = loaded_model.evaluate(X, Y, verbose=0)
print("%s: %.2f%%" % (loaded_model.metrics_names[1], score[1]*100))


# calculate predictions
predictions = loaded_model.predict(X1)
# round predictions
rounded = [round(x[0]) for x in predictions]
#print(rounded)
#print(Y1)

## creating confusion matrix
tests = len(rounded)
fp =0
tp =0
fn =0
tn =0
#print (tests)
for i in range(tests):
    if((Y1[i] == 0) and (int(rounded[i])==0)):
        tn=tn+1
    if((Y1[i] == 1) and (int(rounded[i])== 1)):
        tp=tp+1
    if((Y1[i] == 0) and (int(rounded[i])==1)):
        fp=fp+1
    if((Y1[i] == 1) and (int(rounded[i])== 0)):
        fn=fn+1


print (" confusion matrix for givem test data is : ")
print ("tp  ","tn   " ,"fp  ","fn")
print (tp,"  ",tn,"   ",fp,"   ",fn)

# prediction accuracy
prediction_accuracy =(tp+tn)/(tp+tn+fp+fn)
print("prediction_accuracy is: ", prediction_accuracy*100,"%")

# true positive rate
true_positive =(tp)/(tp+fn)
print("true_positive rate is: ", true_positive*100,"%")

# true negative rate
true_negative =(tn)/(tn+fp)
print("true_negative rate is: ", true_negative*100,"%")

# false positive rate
false_positive =(fp)/(tn+fp)
print("false_positive rate is: ", false_positive*100,"%")

# false negative rate
false_negative =(fn)/(tp+fn)
print("false_negative rate is: ", false_negative*100,"%")
