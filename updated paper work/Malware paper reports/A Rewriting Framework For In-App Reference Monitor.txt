A Rewriting Framework For In-App Reference Monitors for Android Applications 
=============================================================================


Malware Analysis Technique:
===========================


Dynamic analysis



Dataset description:
======================

The method is scalable to large amount of apps with minor overhead.


Feature selection Technique:
============================

------------

Feature Extraction Technique:
============================

-------------


Classification Technique:
=========================

-------------------

Accuracy or confusion matrix scores:
====================================



Scalability and Efficiency:
===========================

The method is scalable to large amount of apps with minor overhead.

Overview:
=========

Researchers has proposed I-ARM-Droid an app rewriting framework for In-App reference monitors for android Applications. The framework user identifies security sensitive API methods and specifies their security policies, which may be tailored to each application. Then the framework automatically rewrites the Dalvik byteccode of the application. Dalvik bytecode is prefered instead of rewriting java bytecode to prevent the loss of information during conversion process which may lea to wrong inference.

In their approach the reference monitor is embedded into the untrusted application itself. They have discussed the disadvantage of embedding the reference monitor in another application to support their their approach. To use this framework user has to identify the target methods to be modified and they also provide the expected modified behavior. This information is then used to intercept the method invocations and to generate "stud" and "wedge" automatically. A new method is created to augment the behavior of the specified target methods. stub and wedges are placed into class to mirror the hierarchy of the application. The "stubs" are use to augment the behavior of normal methods while the wedges are used to mimic the behavior of class hierarchy.There are mainly three types of methods static, instance methods and constructors, and these are invoked by using invoke-static, invoke-virtual and invoke-direct calls. The prototype is able to intercept the native code invocation but rewriting is is not yet implemented for it. The rewriting framework provides 1) improved fine grained access control 2) implements "Same origin policy" 3) General Purpose Instrumentation as main features.

The framework was able to intercept all the invocation calls and rewrite all the methods. This was verified by logging the method invocations. During evaluation it was observed that the overhead of additional method calls for each stub and wedge method will be dominated by the time taken to perform the method themselves, making the approach practical for use. All the methods are written at a single place and the reference monitor is used to access them. This helps in reducing the additional size due to stub and wedge definitions.