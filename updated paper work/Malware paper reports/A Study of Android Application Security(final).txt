A Study of Android Application Security
======================================================================================


Malware Analysis Technique:
===========================

static


Dataset description:
======================




Feature selection Technique:
============================



Feature Extraction Technique:
============================


Classification Technique:
=========================



Accuracy or confusion matrix scores:
====================================



Scalability and Efficiency:
===========================



Overview:
=========

Researchers has used a static code analysis technique to find the possible vulnerabilities and dangerous functionality related to android and also highlighted their causes wherever possible. They have developed a Dalvik decompiler ded which converts the Dalvik code to Java code with high accuracy and few failed cases.  The main contribution of their study are :
(almost as it is )
a) exploring previously uncovered issues
b) searching for general coding security failures
c) exploring misuse/security failures in the use of Android Framework

To achieve these objectives they performed control flow analysis, data flow analysis, structural analysis and semantic analysis by using existing code analysis tools like soot. Their findings can be categorized under following topics.

[1] Misuse of Phone Identifiers :
-> Past studies has highlighted the leakage of phone identifiers so they have attempted to study the cause for leakage of phone identifiers. It was observed that the phone identifiers are leaked by applications in plain text, and HTTP GET and POST parameters being the most common sinks. Developers use this information to uniquely identify and track the users. It was observed that the assumption of invisibility of IMEI-customer mapping to outsides is no longer held and IMEI number was mainly used to track users. But, it was also observed that not all applications exfiltrate the phone identifiers. The identifiers were also being sent to advertisement servers.


[2]Exposure of Physical Location :
-> Past studies reveled that location information was leaked by advertisement libraries and same was observed in their study. In addition they observed that the granularity of location information sent may not be obvious.


[3]Abuse of Telephony Service : 
-> In past studies the use of hard-coded numbers was observed by malwares. But in their study they did not found any use of fixed phone numbers or misuse of voice services, for sending or calling to premium numbers. The call functionality was mainly being used to call customer services and  not all fixed telephone numbers were being used to make a call.

[4] Eavesdropping on Audio/Video ;
-> Researchers did not found any audio or video eavesdropping case in their study while this was identified as one of the threats by previous studies.


[5] Botnet Characteristics (Sockets):

-> It was observed that few applications used Socket API directly but no malicious use was detected by them. However, they have highlighted the need of a deeper inspection.


[6] Harvesting Installed Applications:

-> It was observed that applications do not harvest data regarding the installed applications.


[7] Advertisement Library inclusion :

-> In their study they have highlighted the use of 22 advertisement or analytics libraries and an application contained one or more such libraries. About 51% apps were found to be using them and AdMob and Google Ads were being used most. These libraries uses location information and phone identifiers which is also sent to servers. In addition to it the reporting frequency and information being reported is configurable in nature. These libraries probe for permission regarding location and phone identifiers. Some of the libraries were using obfuscation which made their analysis difficult.


[8] Dangerous developer libraries:

-> It was reported that some of the developer libraries were replicating dangerous functionality of discontinued libraries. Cases of probing for permission are also highlighted by them. It was also observed that the branded companies are also hiring the developers using such functionalities.


[9] Android Specific vulnerabilities:

-> IT was observed that some of the private information was being leaked through android logs and IPC. The main reason for IPC leaks was identified in the form of unprotected broadcasts and intent injections. Another vulnerability related to unsafe control delegation and Not checking Null references were highlighted. However no malicious uses were found in their analysis but a deeper check is needed.


[10] Some cases of unexpected SDcard are also highlighted and they have also stressed on the possibility of misuse of native calls by applications.