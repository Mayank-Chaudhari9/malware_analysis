Android Permissions Demystified
=======================================================================================


Malware Analysis Technique:
===========================

Static Analysis and manual Analysis






Dataset description:
======================

The application was performed over 940 applications from Android market






Feature selection Technique:
============================

-------





Feature Extraction Technique:
============================
-----------




Classification Technique:
=========================
------------







Accuracy or confusion matrix scores:
====================================

They state a false positive rate of 7% for detection of over-privileged cases

Scalability and Efficiency:
===========================



Overview:
=========

Researchers has proposed a static analysis framework (Stowaway) to investigate the over-privilege issues in android applications. In their study it was observed that the Android documentation does not provide a sufficient permission information resulting in violation of least privilege principal by developers. Their experiment highlighted sixteen fold improvement in the detection of permission checks compared to the original Android documentation. It was also found that documentation for 6 API methods was wrong.
 The results of empirical study of permissions stated that
 1-> only 6.45% API methods required permission checks
 2-> 12% normal API calls ans 35% RPC were protected with Signature/System Signature permission checks
 3-> few permissions were left for future use and were never used
 4->the permissions seem to imply a hierarchal relationship but in reality there was no planned hierarchy except one case.
 5-> inconstancy in permission granularity
 6-> presence of wide variety of class protection rates. 

 It was observed that 56% over-privileged applications were having only one extra permission while 94% cases were having less than four extra permissions. The findings depict that one third of the applications are over-privileged but per-application extra permission allocation rate is very low. This indicate that the developers try to stick to the least privilege concept depicting the effectiveness of application install time permission requirement. In their analysis researches has identified the developer errors due to similar sounding permission names, over-privileging application due to deputie's permission requirement, over-privileging of related methods, copy-pasting from various message boards, use of deprecated permissions, allocation of permission during testing time. These issues can be solved by improved Android documentation. 

 *some-times the developers intentionally ask for extra permission so that the updated applications run without any error. 